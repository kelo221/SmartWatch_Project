// Code generated by ent, DO NOT EDIT.

package ent

import (
	"SmartWatch_Project/ent/event"
	"SmartWatch_Project/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UnixTime holds the value of the "unixTime" field.
	UnixTime int `json:"unixTime,omitempty"`
	// EventName holds the value of the "eventName" field.
	EventName string `json:"eventName,omitempty"`
	// IsSilent holds the value of the "isSilent" field.
	IsSilent bool `json:"isSilent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges       EventEdges `json:"edges"`
	user_events *int
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Username holds the value of the username edge.
	Username *User `json:"username,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsernameOrErr returns the Username value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) UsernameOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Username == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Username, nil
	}
	return nil, &NotLoadedError{edge: "username"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldIsSilent:
			values[i] = new(sql.NullBool)
		case event.FieldID, event.FieldUnixTime:
			values[i] = new(sql.NullInt64)
		case event.FieldEventName:
			values[i] = new(sql.NullString)
		case event.ForeignKeys[0]: // user_events
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Event", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case event.FieldUnixTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unixTime", values[i])
			} else if value.Valid {
				e.UnixTime = int(value.Int64)
			}
		case event.FieldEventName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eventName", values[i])
			} else if value.Valid {
				e.EventName = value.String
			}
		case event.FieldIsSilent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isSilent", values[i])
			} else if value.Valid {
				e.IsSilent = value.Bool
			}
		case event.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_events", value)
			} else if value.Valid {
				e.user_events = new(int)
				*e.user_events = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUsername queries the "username" edge of the Event entity.
func (e *Event) QueryUsername() *UserQuery {
	return (&EventClient{config: e.config}).QueryUsername(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("unixTime=")
	builder.WriteString(fmt.Sprintf("%v", e.UnixTime))
	builder.WriteString(", ")
	builder.WriteString("eventName=")
	builder.WriteString(e.EventName)
	builder.WriteString(", ")
	builder.WriteString("isSilent=")
	builder.WriteString(fmt.Sprintf("%v", e.IsSilent))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
