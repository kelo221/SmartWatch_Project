// Code generated by ent, DO NOT EDIT.

package event

import (
	"SmartWatch_Project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UnixTime applies equality check predicate on the "unixTime" field. It's identical to UnixTimeEQ.
func UnixTime(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnixTime), v))
	})
}

// EventName applies equality check predicate on the "eventName" field. It's identical to EventNameEQ.
func EventName(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventName), v))
	})
}

// IsSilent applies equality check predicate on the "isSilent" field. It's identical to IsSilentEQ.
func IsSilent(v bool) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSilent), v))
	})
}

// UnixTimeEQ applies the EQ predicate on the "unixTime" field.
func UnixTimeEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnixTime), v))
	})
}

// UnixTimeNEQ applies the NEQ predicate on the "unixTime" field.
func UnixTimeNEQ(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnixTime), v))
	})
}

// UnixTimeIn applies the In predicate on the "unixTime" field.
func UnixTimeIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnixTime), v...))
	})
}

// UnixTimeNotIn applies the NotIn predicate on the "unixTime" field.
func UnixTimeNotIn(vs ...int) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnixTime), v...))
	})
}

// UnixTimeGT applies the GT predicate on the "unixTime" field.
func UnixTimeGT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnixTime), v))
	})
}

// UnixTimeGTE applies the GTE predicate on the "unixTime" field.
func UnixTimeGTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnixTime), v))
	})
}

// UnixTimeLT applies the LT predicate on the "unixTime" field.
func UnixTimeLT(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnixTime), v))
	})
}

// UnixTimeLTE applies the LTE predicate on the "unixTime" field.
func UnixTimeLTE(v int) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnixTime), v))
	})
}

// EventNameEQ applies the EQ predicate on the "eventName" field.
func EventNameEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventName), v))
	})
}

// EventNameNEQ applies the NEQ predicate on the "eventName" field.
func EventNameNEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventName), v))
	})
}

// EventNameIn applies the In predicate on the "eventName" field.
func EventNameIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEventName), v...))
	})
}

// EventNameNotIn applies the NotIn predicate on the "eventName" field.
func EventNameNotIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEventName), v...))
	})
}

// EventNameGT applies the GT predicate on the "eventName" field.
func EventNameGT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventName), v))
	})
}

// EventNameGTE applies the GTE predicate on the "eventName" field.
func EventNameGTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventName), v))
	})
}

// EventNameLT applies the LT predicate on the "eventName" field.
func EventNameLT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventName), v))
	})
}

// EventNameLTE applies the LTE predicate on the "eventName" field.
func EventNameLTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventName), v))
	})
}

// EventNameContains applies the Contains predicate on the "eventName" field.
func EventNameContains(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEventName), v))
	})
}

// EventNameHasPrefix applies the HasPrefix predicate on the "eventName" field.
func EventNameHasPrefix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEventName), v))
	})
}

// EventNameHasSuffix applies the HasSuffix predicate on the "eventName" field.
func EventNameHasSuffix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEventName), v))
	})
}

// EventNameEqualFold applies the EqualFold predicate on the "eventName" field.
func EventNameEqualFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEventName), v))
	})
}

// EventNameContainsFold applies the ContainsFold predicate on the "eventName" field.
func EventNameContainsFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEventName), v))
	})
}

// IsSilentEQ applies the EQ predicate on the "isSilent" field.
func IsSilentEQ(v bool) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSilent), v))
	})
}

// IsSilentNEQ applies the NEQ predicate on the "isSilent" field.
func IsSilentNEQ(v bool) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsSilent), v))
	})
}

// HasUsername applies the HasEdge predicate on the "username" edge.
func HasUsername() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsernameTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsernameTable, UsernameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsernameWith applies the HasEdge predicate on the "username" edge with a given conditions (other predicates).
func HasUsernameWith(preds ...predicate.User) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsernameInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsernameTable, UsernameColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		p(s.Not())
	})
}
